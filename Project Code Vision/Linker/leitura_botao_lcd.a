;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Advanced
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : Leitura de botão e apresentação de informações no LCD
;Version : 1.0
;Date    : 02/09/2024
;Author  : Henrique Andrade Pancotti, Matheus Luiz Silva Felix, Vinicius Franklin
;Company : UFJF
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 14,745600 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Alphanumeric LCD Module functions
;#include <alcd.h>
;
;// Standard Input/Output functions
;#include <string.h>
;#include <stdio.h>
;#include <delay.h>
;#include <stdlib.h>
;
;// PINA0..3 will be row inputs
;#define KEYIN PINA
;// PORTA4..7 will be column outputs
;#define KEYOUT PORTA
;#define FIRST_COLUMN 0x80
;#define LAST_COLUMN 0x10
;
;typedef unsigned char byte;
;// store here every key state as a bit,
;// bit 0 will be KEY0, bit 1 KEY1,...
;unsigned int keys;
;
;int andar_elevador;
;int andar_atual;
;int andares_acionados[3]; // Adaptar para 3 andares
;int fila_de_andares[3] = {0,1,0};

	.DSEG
;int controle_delay_parado = 0;
;int proximo_andar = -1;
;
;typedef struct {
;    int distancia;
;    int andar;
;} DistanciaAteAndar;
;
;void swap(DistanciaAteAndar *a, DistanciaAteAndar *b) {
; 0000 003B void swap(DistanciaAteAndar *a, DistanciaAteAndar *b) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 003C     DistanciaAteAndar temp;
; 0000 003D     temp = *a;
;PCODE: $0000000F VOL: 0
;	*a -> Y+6
;	*b -> Y+4
;	temp -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 003E     *a = *b;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 003F     *b = temp;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0040 }
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;
;int partition(DistanciaAteAndar arr[], int low, int high) {
; 0000 0042 int partition(DistanciaAteAndar arr[], int low, int high) {
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0043     int pivot = arr[high].distancia; // Escolhe o valor do último elemento como pivô
; 0000 0044     int i = (low - 1); // Índice do menor elemento
; 0000 0045     int j;
; 0000 0046 
; 0000 0047     for (j = low; j < high; j++) {
;PCODE: $0000001E VOL: 0
;	arr -> Y+10
;	low -> Y+8
;	high -> Y+6
;	pivot -> R16,R17
;	i -> R18,R19
;	j -> R20,R21
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0048         if (arr[j].distancia < pivot) {
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0049             i++;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 004A             swap(&arr[i], &arr[j]); // Troca
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 004B         }
; 0000 004C     }
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 004D     swap(&arr[i + 1], &arr[high]); // Coloca o pivô na posição correta
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 004E     return (i + 1);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 004F }
;PCODE: $0000005C VOL: 0
;
;void quickSort(DistanciaAteAndar arr[], int low, int high) {
; 0000 0051 void quickSort(DistanciaAteAndar arr[], int low, int high) {
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0052     if (low < high) {
;	arr -> Y+4
;	low -> Y+2
;	high -> Y+0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0053         // Particiona o array e obtém o índice do pivô
; 0000 0054         int pi = partition(arr, low, high);
; 0000 0055 
; 0000 0056         // Ordena recursivamente os elementos antes e depois da partição
; 0000 0057         quickSort(arr, low, pi - 1);
;PCODE: $00000063 VOL: 0
;	arr -> Y+6
;	low -> Y+4
;	high -> Y+2
;	pi -> Y+0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0058         quickSort(arr, pi + 1, high);
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0059     }
;PCODE: $0000007C VOL: 0
; 0000 005A }
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;
;void qsort_custom(DistanciaAteAndar arr[], int n) {
; 0000 005C void qsort_custom(DistanciaAteAndar arr[], int n) {
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 005D     quickSort(arr, 0, n - 1);
;	arr -> Y+2
;	n -> Y+0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 005E }
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0062 {
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0063 static byte key_pressed_counter=20;

	.DSEG

	.CSEG
; 0000 0064 static byte key_released_counter,column=FIRST_COLUMN;

	.DSEG

	.CSEG
; 0000 0065 static unsigned int row_data,crt_key;
; 0000 0066 // Reinitialize Timer 0 value
; 0000 0067 TCNT0=0x8D; // para 2ms
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0068 // Place your code here
; 0000 0069 row_data<<=4;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 006A // get a group of 4 keys in in row_data
; 0000 006B row_data|=~KEYIN&0xf;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 006C column>>=1;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 006D if (column==(LAST_COLUMN>>1))
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 006E    {
; 0000 006F    column=FIRST_COLUMN;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0070    if (row_data==0) goto new_key;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0071    if (key_released_counter) --key_released_counter;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0072    else
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0073       {
; 0000 0074       if (--key_pressed_counter==9) crt_key=row_data;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0075       else
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0076          {
; 0000 0077          if (row_data!=crt_key)
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0078             {
; 0000 0079             new_key:
;PCODE: $000000BF VOL: 0
; 0000 007A             key_pressed_counter=10;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 007B             key_released_counter=0;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 007C             goto end_key;
;PCODE: $000000C4 VOL: 0
; 0000 007D             };
;PCODE: $000000C5 VOL: 0
; 0000 007E          if (!key_pressed_counter)
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 007F             {
; 0000 0080             keys=row_data;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0081             key_released_counter=20;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 0082             };
;PCODE: $000000CD VOL: 0
; 0000 0083          };
;PCODE: $000000CE VOL: 0
; 0000 0084       };
;PCODE: $000000CF VOL: 0
; 0000 0085    end_key:;
;PCODE: $000000D0 VOL: 0
; 0000 0086    row_data=0;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 0087    };
;PCODE: $000000D3 VOL: 0
; 0000 0088 // select next column, inputs will be with pull-up
; 0000 0089 KEYOUT=~column;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 008A }
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;
;unsigned inkey(void)
; 0000 008D {
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 008E unsigned k;
; 0000 008F if (k=keys) keys=0;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;	k -> R16,R17
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 0090 return k;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 0091 }
;PCODE: $000000E7 VOL: 0
;
;void init_keypad(void)
; 0000 0094 {
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 0095 // PORT D initialization
; 0000 0096 // Bits 0..3 inputs
; 0000 0097 // Bits 4..7 outputs
; 0000 0098 DDRA=0xf0;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 0099 // Use pull-ups on bits 0..3 inputs
; 0000 009A // Output 1 on 4..7 outputs
; 0000 009B PORTA=0xff;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 009C // Timer/Counter 0 initialization
; 0000 009D // Clock source: System Clock
; 0000 009E // Clock value: 57.600 kHz
; 0000 009F // Mode: Normal top=FFh
; 0000 00A0 // OC0 output: Disconnected
; 0000 00A1 //TCCR0=0x03;
; 0000 00A2 //INIT_TIMER0;
; 0000 00A3 TCCR0=0x04;
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 00A4 TCNT0=0x8D;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 00A5 OCR0=0x00;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00A6 
; 0000 00A7 // External Interrupts are off
; 0000 00A8 //MCUCR=0x00;
; 0000 00A9 //EMCUCR=0x00;
; 0000 00AA // Timer 0 overflow interrupt is on
; 0000 00AB //TIMSK=0x02;
; 0000 00AC // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00AD TIMSK=0x01;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00AE #asm("sei")
;PCODE: $000000F6 VOL: 0
	sei
;PCODE: $000000F7 VOL: 0
; 0000 00AF }
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;
;// Declare your global variables here
;// LCD display buffer
;char lcd_buffer[33];
;int estado_sensor_andares[8];
;
;// Passo atual do motor
;int step_number = 0;
;
;void atualiza_estado_sensores() {
; 0000 00B9 void atualiza_estado_sensores() {
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00BA     estado_sensor_andares[0] = PIND.0;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 00BB     estado_sensor_andares[1] = PIND.1;
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00BC     estado_sensor_andares[2] = PIND.2;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00BD     estado_sensor_andares[3] = PIND.3;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00BE     estado_sensor_andares[4] = PIND.4;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00BF     estado_sensor_andares[5] = PIND.5;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00C0     estado_sensor_andares[6] = PIND.6;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 00C1     estado_sensor_andares[7] = PIND.7;
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 00C2 }
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;
;// Função para ordenar um array usando o algoritmo Bubble Sort
;void bubble_sort(int arr[], int n) {
; 0000 00C5 void bubble_sort(int arr[], int n) {
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 00C6     int i, j, temp;
; 0000 00C7     for (i = 0; i < n - 1; i++) {
;PCODE: $0000012E VOL: 0
;	arr -> Y+8
;	n -> Y+6
;	i -> R16,R17
;	j -> R18,R19
;	temp -> R20,R21
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00C8         // Últimos i elementos já estão na posição correta
; 0000 00C9         for (j = 0; j < n - i - 1; j++) {
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 00CA             // Troca se o elemento encontrado for maior do que o próximo elemento
; 0000 00CB             if (arr[j] > arr[j + 1]) {
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 00CC                 temp = arr[j];
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 00CD                 arr[j] = arr[j + 1];
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 00CE                 arr[j + 1] = temp;
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 00CF             }
; 0000 00D0         }
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 00D1     }
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 00D2 }
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;
;void print_array(int array[], int size){
; 0000 00D4 void print_array(int array[], int size){
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 00D5     int i;
; 0000 00D6     printf("\r\n");
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;	array -> Y+4
;	size -> Y+2
;	i -> R16,R17
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 00D7     for(i = 0; i < size; i++) {
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 00D8         printf("%i ", array[i]);
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 00D9         if(i == (size-1)){
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 00DA             printf("\r\n");
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 00DB         }
; 0000 00DC     }
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 00DD }
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;
;unsigned identifica_andar_atual(){
; 0000 00DF unsigned identifica_andar_atual(){
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 00E0     // Completar COLOCAR NAS PORTAS D
; 0000 00E1 
; 0000 00E2     int k;
; 0000 00E3 
; 0000 00E4     if(estado_sensor_andares[0]==1)
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;	k -> R16,R17
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 00E5             andar_atual =0;
;PCODE: $000001BB VOL: 0
; 0000 00E6     if(estado_sensor_andares[3]==1)
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 00E7             andar_atual = 1;
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 00E8     if(estado_sensor_andares[2]==1)
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 00E9             andar_atual = 2;
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 00EA 
; 0000 00EB 
; 0000 00EC     printf("\r\nAndar Atual %i",andar_atual);
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 00ED     return andar_atual; // remover
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0000 00EE }
;PCODE: $000001D8 VOL: 0
;
;void sobe_elevador(){
; 0000 00F0 void sobe_elevador(){
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 00F1     PORTB.0 = 1;
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 00F2     PORTB.1 = 0;
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 00F3     PORTB.2 = 1;
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 00F4     PORTB.3 = 1;
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0000 00F5     controle_delay_parado=1;
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 00F6 }
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;
;
;void desce_elevador(){
; 0000 00F9 void desce_elevador(){
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 00FA     PORTB.0 = 0;
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0000 00FB     PORTB.1 = 1;
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0000 00FC     PORTB.2 = 1;
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 00FD     PORTB.3 = 1;
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 00FE     controle_delay_parado=1;
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 00FF }
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;
;void para_elevador(){
; 0000 0101 void para_elevador(){
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 0102     andares_acionados[andar_atual] = 0;
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 0103     PORTB.0 = 0;
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 0104     PORTB.1 = 0;
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 0105     if(controle_delay_parado==1){
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 0106         PORTB.2 = 0;
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 0107         PORTB.3 = 0;
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0000 0108         delay_ms(2000);
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0000 0109         controle_delay_parado=0;
;PCODE: $0000020B VOL: 0
; 0000 010A     }
; 0000 010B 
; 0000 010C }
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;
;int compareDistanciasAteAndares(const void *a, const void *b) {
; 0000 010E int compareDistanciasAteAndares(const void *a, const void *b) {
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0000 010F     DistanciaAteAndar *elem1 = (DistanciaAteAndar *)a;
; 0000 0110     DistanciaAteAndar *elem2 = (DistanciaAteAndar *)b;
; 0000 0111     return elem1->distancia - elem2->distancia; // Comparação em ordem crescente
;PCODE: $00000211 VOL: 0
;	*a -> Y+6
;	*b -> Y+4
;	*elem1 -> R16,R17
;	*elem2 -> R18,R19
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 0112 }
;PCODE: $00000220 VOL: 0
;
;void sortDistanciasAteAndares(int arr[], int n) {
; 0000 0114 void sortDistanciasAteAndares(int arr[], int n) {
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
; 0000 0115     int i;
; 0000 0116     DistanciaAteAndar *elements = malloc(n * sizeof(DistanciaAteAndar));
; 0000 0117 
; 0000 0118     // Preencher a estrutura com valores e índices
; 0000 0119     for (i = 0; i < n; i++) {
;PCODE: $00000223 VOL: 0
;	arr -> Y+6
;	n -> Y+4
;	i -> R16,R17
;	*elements -> R18,R19
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 011A         elements[i].distancia = arr[i];
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 011B         elements[i].andar = i;
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0000 011C     }
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0000 011D 
; 0000 011E     // Ordenar usando qsort
; 0000 011F     qsort_custom(elements, n);
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
; 0000 0120 
; 0000 0121     // Imprimir os valores ordenados e seus índices
; 0000 0122     printf("Distâncias ordenadas e seus andares:\n");
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
; 0000 0123 
; 0000 0124     for (i = 0; i < n; i++) {
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
; 0000 0125         printf("Distância: %d, Andar: %d\n", elements[i].distancia, elements[i].andar);
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
; 0000 0126     }
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0000 0127 
; 0000 0128     // Liberar memória
; 0000 0129     free(elements);
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
; 0000 012A }
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;
;void atualiza_fila_de_andares(char andares_acionados[], int fila[], int size) {
; 0000 012C void atualiza_fila_de_andares(char andares_acionados[], int fila[], int size) {
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 012D     //int andar_atual = identifica_andar_atual();
; 0000 012E     int i;
; 0000 012F     int subtracoes_andares[3];
; 0000 0130 
; 0000 0131     for(i = 0; i<3; i++){
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;	andares_acionados -> Y+12
;	fila -> Y+10
;	size -> Y+8
;	i -> R16,R17
;	subtracoes_andares -> Y+2
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
; 0000 0132         subtracoes_andares[i] = abs(andares_acionados[i]*(andar_atual-(andares_acionados[i]*i)));
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
; 0000 0133     }
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
; 0000 0134 
; 0000 0135     print_array(subtracoes_andares, sizeof(subtracoes_andares) / sizeof(subtracoes_andares[0]));
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
; 0000 0136 
; 0000 0137     sortDistanciasAteAndares(subtracoes_andares, (sizeof(subtracoes_andares) / sizeof(subtracoes_andares[0])));
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
; 0000 0138 
; 0000 0139     /*
; 0000 013A     bubble_sort(subtracoes_andares, 3);
; 0000 013B     printf("\r\nArray sub andares\r\n ");
; 0000 013C     print_array(subtracoes_andares, 3);
; 0000 013D 
; 0000 013E 
; 0000 013F     for(i = 0; i<3; i++) {
; 0000 0140         int resultado_atual = abs(subtracoes_andares[i]-andar_atual);
; 0000 0141         if (resultado_atual == andar_atual) fila[i] = 0;
; 0000 0142         else fila[i] = resultado_atual;
; 0000 0143     }
; 0000 0144 
; 0000 0145     if(fila[1] == 1 && fila[2] == 1)
; 0000 0146         fila[2]=3;
; 0000 0147 
; 0000 0148     print_array(fila, 3);
; 0000 0149     */
; 0000 014A }
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;
;void define_proximo_andar() {
; 0000 014C void define_proximo_andar() {
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
; 0000 014D     //int andar_atual = identifica_andar_atual();
; 0000 014E 
; 0000 014F     switch(andar_atual) {
;PCODE: $000002BF VOL: 0
; 0000 0150         case 0:
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
; 0000 0151             if(andares_acionados[1] == 1){
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
; 0000 0152                 proximo_andar = 1;
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 0000 0153                 sobe_elevador();
;PCODE: $000002C8 VOL: 0
; 0000 0154             }
; 0000 0155             else if(andares_acionados[2] == 1){
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
; 0000 0156                 proximo_andar = 2;
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
; 0000 0157                 sobe_elevador();
;PCODE: $000002D1 VOL: 0
; 0000 0158                 //delay_ms(100);
; 0000 0159             }
; 0000 015A             break;
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
; 0000 015B         case 1:
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
; 0000 015C             if(andares_acionados[0] == 1){
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
; 0000 015D                 proximo_andar = 0;
;PCODE: $000002DB VOL: 0
; 0000 015E                 desce_elevador();
;PCODE: $000002DC VOL: 0
; 0000 015F             }
; 0000 0160             else if(andares_acionados[2] == 1){
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
; 0000 0161                 proximo_andar = 2;
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
; 0000 0162                 sobe_elevador();
;PCODE: $000002E5 VOL: 0
; 0000 0163                 //delay_ms(100);
; 0000 0164             }
; 0000 0165             break;
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
; 0000 0166         case 2:
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
; 0000 0167             if(andares_acionados[1] == 1){
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
; 0000 0168                 proximo_andar = 1;
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
; 0000 0169                 desce_elevador();
;PCODE: $000002F2 VOL: 0
; 0000 016A             }
; 0000 016B             else if(andares_acionados[0] == 1){
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
; 0000 016C                 proximo_andar = 0;
;PCODE: $000002F8 VOL: 0
; 0000 016D                 desce_elevador();
;PCODE: $000002F9 VOL: 0
; 0000 016E             }
; 0000 016F             break;
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
; 0000 0170     };
;PCODE: $000002FD VOL: 0
; 0000 0171 }
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;
;void verifica_chegada_andar_objetivo() {
; 0000 0173 void verifica_chegada_andar_objetivo() {
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
; 0000 0174     //int andar_atual = identifica_andar_atual();
; 0000 0175 
; 0000 0176     if(andar_atual == proximo_andar || proximo_andar == -1)
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
; 0000 0177         para_elevador();
;PCODE: $0000030A VOL: 0
; 0000 0178 }
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;
;void rotate_stepper_motor(int dir) {
; 0000 017A void rotate_stepper_motor(int dir) {
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
; 0000 017B     if (dir) {
;	dir -> Y+0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
; 0000 017C         switch(step_number){
;PCODE: $00000313 VOL: 0
; 0000 017D             case 0:
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
; 0000 017E                 PORTB.1 = 1;
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
; 0000 017F                 PORTB.2 = 0;
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
; 0000 0180                 PORTB.3 = 0;
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
; 0000 0181                 PORTB.4 = 0;
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
; 0000 0182                 break;
;PCODE: $0000031E VOL: 0
; 0000 0183             case 1:
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
; 0000 0184                 PORTB.1 = 0;
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
; 0000 0185                 PORTB.2 = 1;
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
; 0000 0186                 PORTB.3 = 0;
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
; 0000 0187                 PORTB.4 = 0;
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
; 0000 0188                 break;
;PCODE: $0000032A VOL: 0
; 0000 0189             case 2:
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
; 0000 018A                 PORTB.1 = 0;
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
; 0000 018B                 PORTB.2 = 0;
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
; 0000 018C                 PORTB.3 = 1;
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
; 0000 018D                 PORTB.4 = 0;
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
; 0000 018E                 break;
;PCODE: $00000336 VOL: 0
; 0000 018F             case 3:
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
; 0000 0190                 PORTB.1 = 0;
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
; 0000 0191                 PORTB.2 = 0;
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
; 0000 0192                 PORTB.3 = 0;
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
; 0000 0193                 PORTB.4 = 1;
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
; 0000 0194                 break;
;PCODE: $00000342 VOL: 0
; 0000 0195         }
;PCODE: $00000343 VOL: 0
; 0000 0196     } else {
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
; 0000 0197         switch(step_number){
;PCODE: $00000346 VOL: 0
; 0000 0198             case 0:
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
; 0000 0199                 PORTB.1 = 0;
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
; 0000 019A                 PORTB.2 = 0;
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
; 0000 019B                 PORTB.3 = 0;
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
; 0000 019C                 PORTB.4 = 1;
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
; 0000 019D                 break;
;PCODE: $00000351 VOL: 0
; 0000 019E             case 1:
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
; 0000 019F                 PORTB.1 = 0;
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
; 0000 01A0                 PORTB.2 = 0;
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
; 0000 01A1                 PORTB.3 = 1;
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
; 0000 01A2                 PORTB.4 = 0;
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
; 0000 01A3                 break;
;PCODE: $0000035D VOL: 0
; 0000 01A4             case 2:
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
; 0000 01A5                 PORTB.1 = 0;
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
; 0000 01A6                 PORTB.2 = 1;
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
; 0000 01A7                 PORTB.3 = 0;
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
; 0000 01A8                 PORTB.4 = 0;
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
; 0000 01A9                 break;
;PCODE: $00000369 VOL: 0
; 0000 01AA             case 3:
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
; 0000 01AB                 PORTB.1 = 1;
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
; 0000 01AC                 PORTB.2 = 0;
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
; 0000 01AD                 PORTB.3 = 0;
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
; 0000 01AE                 PORTB.4 = 0;
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
; 0000 01AF                 break;
;PCODE: $00000375 VOL: 0
; 0000 01B0         }
;PCODE: $00000376 VOL: 0
; 0000 01B1     }
;PCODE: $00000377 VOL: 0
; 0000 01B2 }
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;
;void main(void)
; 0000 01B5 {
;PCODE: $0000037B VOL: 0
; 0000 01B6 // Declare your local variables here
; 0000 01B7 unsigned int k;
; 0000 01B8 
; 0000 01B9 // Input/Output Ports initialization
; 0000 01BA // Port A initialization
; 0000 01BB // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 01BC // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 01BD PORTA=0x00;
;	k -> R16,R17
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
; 0000 01BE DDRA=0x00;
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
; 0000 01BF 
; 0000 01C0 // Port B initialization
; 0000 01C1 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 01C2 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 01C3 PORTB=0x00;
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
; 0000 01C4 DDRB=0xFF;
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
; 0000 01C5 
; 0000 01C6 // Port C initialization
; 0000 01C7 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 01C8 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 01C9 PORTC=0x00;
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
; 0000 01CA DDRC=0x00;
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
; 0000 01CB 
; 0000 01CC // Port D initialization
; 0000 01CD // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 01CE // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 01CF PORTD=0x00;
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
; 0000 01D0 DDRD=0x00;
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
; 0000 01D1 
; 0000 01D2 // Timer/Counter 0 initialization
; 0000 01D3 // Clock source: System Clock
; 0000 01D4 // Clock value: 14745,600 kHz
; 0000 01D5 // Mode: Normal top=0xFF
; 0000 01D6 // OC0 output: Disconnected
; 0000 01D7 TCCR0=0x01;
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
; 0000 01D8 TCNT0=0x00;
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
; 0000 01D9 OCR0=0x00;
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
; 0000 01DA 
; 0000 01DB // Timer/Counter 1 initialization
; 0000 01DC // Clock source: System Clock
; 0000 01DD // Clock value: Timer1 Stopped
; 0000 01DE // Mode: Normal top=0xFFFF
; 0000 01DF // OC1A output: Discon.
; 0000 01E0 // OC1B output: Discon.
; 0000 01E1 // Noise Canceler: Off
; 0000 01E2 // Input Capture on Falling Edge
; 0000 01E3 // Timer1 Overflow Interrupt: Off
; 0000 01E4 // Input Capture Interrupt: Off
; 0000 01E5 // Compare A Match Interrupt: Off
; 0000 01E6 // Compare B Match Interrupt: Off
; 0000 01E7 TCCR1A=0x00;
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
; 0000 01E8 TCCR1B=0x00;
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
; 0000 01E9 TCNT1H=0x00;
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
; 0000 01EA TCNT1L=0x00;
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
; 0000 01EB ICR1H=0x00;
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
; 0000 01EC ICR1L=0x00;
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
; 0000 01ED OCR1AH=0x00;
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
; 0000 01EE OCR1AL=0x00;
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
; 0000 01EF OCR1BH=0x00;
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
; 0000 01F0 OCR1BL=0x00;
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
; 0000 01F1 
; 0000 01F2 // Timer/Counter 2 initialization
; 0000 01F3 // Clock source: System Clock
; 0000 01F4 // Clock value: 14745,600 kHz
; 0000 01F5 // Mode: Fast PWM top=0xFF
; 0000 01F6 // OC2 output: Non-Inverted PWM
; 0000 01F7 ASSR=0x00;
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
; 0000 01F8 TCCR2=0x69;
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
; 0000 01F9 TCNT2=0x00;
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
; 0000 01FA OCR2=200;
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
; 0000 01FB 
; 0000 01FC // External Interrupt(s) initialization
; 0000 01FD // INT0: Off
; 0000 01FE // INT1: Off
; 0000 01FF // INT2: Off
; 0000 0200 MCUCR=0x00;
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
; 0000 0201 MCUCSR=0x00;
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
; 0000 0202 
; 0000 0203 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0204 TIMSK=0x01;
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
; 0000 0205 
; 0000 0206 // USART initialization
; 0000 0207 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0208 // USART Receiver: On
; 0000 0209 // USART Transmitter: On
; 0000 020A // USART Mode: Asynchronous
; 0000 020B // USART Baud Rate: 19200
; 0000 020C UCSRA=0x00;
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
; 0000 020D UCSRB=0x18;
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
; 0000 020E UCSRC=0x86;
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
; 0000 020F UBRRH=0x00;
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
; 0000 0210 UBRRL=0x2F;
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
; 0000 0211 
; 0000 0212 // Analog Comparator initialization
; 0000 0213 // Analog Comparator: Off
; 0000 0214 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0215 ACSR=0x80;
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
; 0000 0216 SFIOR=0x00;
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
; 0000 0217 
; 0000 0218 // ADC initialization
; 0000 0219 // ADC disabled
; 0000 021A ADCSRA=0x00;
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
; 0000 021B 
; 0000 021C // SPI initialization
; 0000 021D // SPI disabled
; 0000 021E SPCR=0x00;
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
; 0000 021F 
; 0000 0220 // TWI initialization
; 0000 0221 // TWI disabled
; 0000 0222 TWCR=0x00;
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
; 0000 0223 
; 0000 0224 // Alphanumeric LCD initialization
; 0000 0225 // Connections specified in the
; 0000 0226 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 0227 // RS - PORTC Bit 0
; 0000 0228 // RD - PORTC Bit 1
; 0000 0229 // EN - PORTC Bit 2
; 0000 022A // D4 - PORTC Bit 4
; 0000 022B // D5 - PORTC Bit 5
; 0000 022C // D6 - PORTC Bit 6
; 0000 022D // D7 - PORTC Bit 7
; 0000 022E // Characters/line: 16
; 0000 022F lcd_init(16);
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
; 0000 0230 
; 0000 0231 // Global enable interrupts
; 0000 0232 #asm("sei")
;PCODE: $000003CB VOL: 0
	sei
;PCODE: $000003CC VOL: 0
; 0000 0233 //PORTD.7=1;// para apagar o led
; 0000 0234 init_keypad();
;PCODE: $000003CD VOL: 0
; 0000 0235 PORTC.3=1;
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
; 0000 0236 
; 0000 0237 while (1)
;PCODE: $000003D0 VOL: 0
; 0000 0238     {
; 0000 0239         atualiza_estado_sensores();
;PCODE: $000003D1 VOL: 0
; 0000 023A         printf("\r\nArray de estados dos sensores");
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
; 0000 023B         print_array(estado_sensor_andares, 8);
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
; 0000 023C 
; 0000 023D         identifica_andar_atual();
;PCODE: $000003DE VOL: 0
; 0000 023E 
; 0000 023F 
; 0000 0240         printf("\r\nArray de andares acionados");
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
; 0000 0241         print_array(andares_acionados, 3);
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
; 0000 0242 
; 0000 0243         define_proximo_andar();
;PCODE: $000003EB VOL: 0
; 0000 0244         verifica_chegada_andar_objetivo();
;PCODE: $000003EC VOL: 0
; 0000 0245 
; 0000 0246 
; 0000 0247         printf("\r\nPróximo andar: %i\r\n", proximo_andar);
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
; 0000 0248 
; 0000 0249         //printf("\r\nArray de fila de andares\r\n");
; 0000 024A         //atualiza_fila_de_andares(andares_acionados, fila_de_andares, 3);
; 0000 024B 
; 0000 024C         if (k=inkey())
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
; 0000 024D         {
; 0000 024E             if (k >= 0x1000 && k <= 0x8000) {
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
; 0000 024F                 switch(k) {
;PCODE: $00000405 VOL: 0
; 0000 0250                     case 0x8000:
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
; 0000 0251                         sprintf(lcd_buffer, "Terreo");
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
; 0000 0252                         andar_elevador = 0;
;PCODE: $00000411 VOL: 0
; 0000 0253                         andares_acionados[0] = 1;
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
; 0000 0254                         break;
;PCODE: $00000414 VOL: 0
; 0000 0255                     case 0x4000:
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
; 0000 0256                         sprintf(lcd_buffer, "1\xdf andar");
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
; 0000 0257                         andar_elevador = 1;
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
; 0000 0258                         andares_acionados[1] = 1;
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
; 0000 0259                         break;
;PCODE: $00000427 VOL: 0
; 0000 025A                     case 0x2000:
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
; 0000 025B                         sprintf(lcd_buffer, "2\xdf andar");
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
; 0000 025C                         andar_elevador = 2;
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
; 0000 025D                         andares_acionados[2] = 1;
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
; 0000 025E                         break;
;PCODE: $0000043A VOL: 0
; 0000 025F                     /*
; 0000 0260                     case 0x1000:
; 0000 0261                         sprintf(lcd_buffer, "3\xdf andar");
; 0000 0262                         andar_elevador = 3;
; 0000 0263                         andares_acionados[3] = 1;
; 0000 0264                         break;
; 0000 0265                     */
; 0000 0266                 }
;PCODE: $0000043B VOL: 0
; 0000 0267                 printf("\r\nBotão interno do elevador pressionado\r\n");
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
; 0000 0268             }
; 0000 0269             else if (k >= 0x1 && k <= 0x8) {
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
; 0000 026A                 switch(k) {
;PCODE: $0000044F VOL: 0
; 0000 026B                     case 0x8:
;PCODE: $00000450 VOL: 0
;PCODE: $00000451 VOL: 0
; 0000 026C                         sprintf(lcd_buffer, "Terreo");
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
; 0000 026D                         andares_acionados[0] = 1;
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
; 0000 026E                         break;
;PCODE: $0000045D VOL: 0
; 0000 026F                     case 0x4:
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
; 0000 0270                         sprintf(lcd_buffer, "1\xdf andar");
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
; 0000 0271                         andares_acionados[1] = 1;
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
; 0000 0272                         break;
;PCODE: $0000046E VOL: 0
; 0000 0273                     case 0x2:
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
; 0000 0274                         sprintf(lcd_buffer, "2\xdf andar");
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
; 0000 0275                         andares_acionados[2] = 1;
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
; 0000 0276                         break;
;PCODE: $0000047F VOL: 0
; 0000 0277                     /*
; 0000 0278                     case 0x1:
; 0000 0279                         sprintf(lcd_buffer, "3\xdf andar");
; 0000 027A                         andares_acionados[3] = 1;
; 0000 027B                         break;
; 0000 027C                     */
; 0000 027D                 }
;PCODE: $00000480 VOL: 0
; 0000 027E                 printf("\r\nBotão externo de chamada do elevador pressionado\r\n");
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
; 0000 027F             }
; 0000 0280             else
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
; 0000 0281             {
; 0000 0282                 printf("\r\nNenhum botão foi pressionado\r\n");
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
; 0000 0283             }
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
; 0000 0284             lcd_clear();
;PCODE: $00000493 VOL: 0
; 0000 0285             lcd_gotoxy(3,1);
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
; 0000 0286             lcd_puts(lcd_buffer);
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
; 0000 0287         }
; 0000 0288         else
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
; 0000 0289         {
; 0000 028A             printf("\r\nNenhum botão foi pressionado\r\n ");
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
; 0000 028B         }
;PCODE: $000004A5 VOL: 0
; 0000 028C 
; 0000 028D         //rotate_stepper_motor(0);
; 0000 028E 
; 0000 028F         //step_number++;
; 0000 0290         //if(step_number > 3){
; 0000 0291         //    step_number = 0;
; 0000 0292         //}
; 0000 0293 
; 0000 0294         /*
; 0000 0295         printf("\r\nDIREÇÃO 1\r\n ");
; 0000 0296         sobe_elevador();
; 0000 0297         delay_ms(3000);
; 0000 0298         printf("\r\nDIREÇÃO 2\r\n ");
; 0000 0299         para_elevador();
; 0000 029A         delay_ms(3000);
; 0000 029B         printf("\r\nDIREÇÃO 3\r\n ");
; 0000 029C         desce_elevador();
; 0000 029D         */
; 0000 029E         delay_us(10);
;PCODE: $000004A6 VOL: 0
; 0000 029F     }
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
; 0000 02A0 }
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
